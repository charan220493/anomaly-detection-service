
#stdlib imports
import sys
from json import load as _load, dumps as _dumps, loads as _loads
from logging import getLogger as _getLogger, Formatter as _Formatter
from argparse import ArgumentParser as _ArgumentParser
import glob as _glob

#3rd party imports
from pandas import to_numeric as _to_numeric
from flask import Flask as _Flask
from flask import request as _request
from requests import get as _get, post as _post

#internal imports
from det.dataframe.Transform import readData as _readData
from det.anomaly_detection.web_AD_service_driver_ABC import mainProcessEngine as _mainProcessEngine
from det.logging.logging_framework import setup_logging as _setup_logging

_setup_logging()
from flask.logging import default_handler

class RequestFormatter(_Formatter):
	def format(self, record):
		record.url = _request.url
		record.remote_addr = _request.remote_addr
		return super().format(record)

formatter = RequestFormatter(
	'[%(asctime)s] %(remote_addr)s requested %(url)s:'
	'%(levelname)s in %(module)s: message=%(message)s'
)
default_handler.setFormatter(formatter)
app = _Flask(__name__)
app.logger.addHandler(default_handler)

globalRoutingService = {}
globalRoutingService['1'] = {}
globalRoutingService['1']['512'] = {}
globalRoutingService['det'] = {}
globalRoutingService['det']['vms'] = {}

globalRoutingService['SolutionsEngineering'] = {}
globalRoutingService['SolutionsEngineering']['DatamartDevelopment'] ={}
globalRoutingService['SolutionsEngineering']['CoreProcessing'] = {}

globalRoutingService['SolutionsEngineering']['DatamartDevelopment']['DMD-CCR'] = {'influxAPI':None,'influxPort':8086, 'opentsdbAPI':None,'opentsdbPort':None, 'tableName':'Panel_Only_Mobile_Database_testc', 'anomaly_package': None, 'anomaly_class': None, 'apply_AD_cols': None,  'time_range': 45, 'threshold_dict':{'visitors':2, 'duration':2, 'pages':3}, 'parameter_dict':{'frequency': 'D'}}
globalRoutingService['SolutionsEngineering']['CoreProcessing']['CP-CCR'] = {'influxAPI':None,'influxPort':8086, 'opentsdbAPI':None,'opentsdbPort':None, 'tableName':'Panel_Only_Mobile_Database_testb', 'anomaly_package': None, 'anomaly_class': None, 'apply_AD_cols': None,  'time_range': 45, 'threshold_dict':{'visitors':2, 'duration':2, 'pages':3}, 'parameter_dict':{'frequency': 'D'}}
globalRoutingService['1']['512']['Panel_Only_Mobile_Database'] = {'cadence':None, 'influxAPI':None,'influxPort':8086, 'opentsdbAPI':None,'opentsdbPort':None, 'tableName':'Panel_Only_Mobile_Database_testb', 'anomaly_package': None, 'anomaly_class': None, 'apply_AD_cols': None, 'convert_to_1cs': True, 'write_alarms_to_db': True, 'write_telemetry_to_db': False, 'time_range': 45, 'threshold_dict':{'visitors':2, 'duration':2, 'pages':3}, 'parameter_dict':{'frequency': 'D'}}

globalRoutingService['1']['512']['Mobile_Daysession_Test'] = {'influxAPI':None,'influxPort':None, 'opentsdbAPI':None,'opentsdbPort':None, 'tableName':'Mobile_Daysession_Test'}
globalRoutingService['det']['vms']['dd2'] = {'influxAPI':None,'influxPort':8086, 'opentsdbAPI':None,'opentsdbPort':None, 'tableName':'dd2'}


@app.route('/anomaly_mainentry', methods=['POST'])
def anomaly_mainentry():

	outputPayload = {}
	outputPayload['status_detail_text'] = '' #initialize the string field for incremental updates to this field
	try:
		logger = _getLogger(__name__)
		logger.info('in anomaly_mainentry')
		app.logger.info('in anomaly_mainentry via app logger')
		requiredParameters = ['version', 'input_data', 'anomaly_engine', 'business_id', 'group_id', 'encoding', 'record_separator', 'field_separator']

		parametersPresent = True
		if _request.method == 'POST':
			for elem in requiredParameters:
				if _request.form.get(elem) == None:
					parametersPresent = False
					outputPayload['status_code'] = 422
					outputPayload['version'] = '1'
					if outputPayload.get('status_text') is None:
						outputPayload['status_text'] = 'Missing param:%s'%(elem)
					else:
						outputPayload['status_text'] += ', Missing param:%s'%(elem)
			if parametersPresent:
				if _request.form.get('version') == '1':
					logger.debug('after version check, before byte conversion')
					logger.debug('%s'%(str(_request.headers)))
					raw_data = bytes()
					try:
						if int(_request.form.get('isFilePath')) and _request.form.get('input_data'):
							file_path = _request.form['input_data']
							all_files = sorted(_glob.glob(file_path))
							for file in all_files:
								raw_data += _readData(file)
						elif not int(_request.form.get('isFilePath')) and _request.form.get('input_data'):
							raw_data = _request.form['input_data'].encode()
						else:
							logger.error('No file_path or data parameters are present')
							outputPayload['status_code'] = 501
							outputPayload['status_text'] = 'ERROR'
							outputPayload['version'] = '1'
							outputPayload['status_detail_text'] += 'Error in mainProcessEngine no file_path or data present'
							raise Exception("No Data Present")

					except Exception as e:
						logger.error('Caught exception %s in data access'%(str(e)))
						outputPayload['status_code'] = 501
						outputPayload['status_text'] = 'ERROR'
						outputPayload['version'] = '1'
						outputPayload['status_detail_text'] += 'Error in mainProcessEngine %s'%(str(e))
						raise(e)
					logger.debug('have byteData, calling mainProcessEngine')
					#acquire a copy of global routing service info
					try:
						specificRoutingTable = _loads(_request.form['specificRoutingTable'])
						#specificRoutingTable['bID'] = _request.form['business_id']
						#specificRoutingTable['gID'] = _request.form['group_id']
						#specificRoutingTable['dbID'] = _request.form['database']
						#process overrides
						#for elem in specificRoutingTable:
						#	newElem = _request.form.get(elem)
						#	if newElem is not None:
						#		#then this override is present, put into dictionary
						#		logger.info('overriding k,v %s,%s with %s'%(elem,specificRoutingTable[elem],newElem ))
						#		specificRoutingTable[elem] = newElem

					except KeyError as e:
						logger.error('Key Error accessing globalRoutingService %s'%(str(e)))
						raise(e)
					try:
						logger.info('Routing info:%s'%(str(specificRoutingTable)))
						df = _mainProcessEngine(raw_data, encoding=_request.form['encoding'], recordSeparator = _request.form['record_separator'], fieldSeparator = _request.form['field_separator'], metaInformation = specificRoutingTable )
						#call the grafana dashboard creation
						logger.info('after main process engine')
					except Exception as e:
						logger.error('caught exception %s'%(str(e)))
						outputPayload['status_code'] = 501
						outputPayload['status_text'] = 'ERROR'
						outputPayload['version'] = '1'
						outputPayload['status_detail_text'] += 'Error in mainProcessEngine %s'%(str(e))
						raise(e)

					logger.info('prepare output payload')
					outputPayload['status_code'] = 200
					outputPayload['status_text'] = 'OK'
					outputPayload['version'] = '1'
					outputPayload['data'] = df.to_csv(None, header=True, index=False,sep=_request.form['field_separator'])
				else:
					#invalid version
					outputPayload['status_code'] = 422 
					outputPayload['status_text'] = 'Invalid API version'
					outputPayload['version'] = '1'
					outputPayload['status_detail_text'] += 'currently version 1 is supported'


	except Exception as e:
		logger.error('caught exception %s'%(str(e)))
		outputPayload['status_code'] = 501
		outputPayload['status_text'] = 'ERROR'
		outputPayload['version'] = '1'
		outputPayload['status_detail_text'] += ':::%s'%(str(e))
	logger.info('leaving anomaly_mainentry')
	return _dumps(outputPayload)


if __name__ == '__main__':
	print('initiate main processing')
	parser = _ArgumentParser()
	parser.add_argument('-port', default=5005, type=int,help='port to run app on')
	args = parser.parse_args()
	app.run(host = '0.0.0.0',port=args.port, debug=True)
