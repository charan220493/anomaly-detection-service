import json as _json
from argparse import ArgumentParser as _ArgumentParser
import shutil
import os
from logging import getLogger as _getLogger

master_json_file = '/data/output/test_meta.json'


def json_parser(json_file=None, business_id=None, group_id=None, database_id=None, **kwargs):

    master_json_tmp = master_json_file + '.tmp'
    master_json_bak = master_json_file + '.bak'
    remove_bak_file = True
    remove_tmp_file = False

    shutil.copy2(master_json_file, master_json_bak)
    logger = _getLogger(__name__)

    if business_id is not None or group_id is not None or database_id is not None:
        meta_info = {}
        meta_info[business_id] = {}
        meta_info[business_id][group_id] = {}

    else:
        raise ValueError('business_id, group_id or database_id cannot be null')

    if json_file is not None:
        with open (json_file, 'r') as f_h:
            parameter_dict = _json.load(f_h)
            meta_info[business_id][group_id][database_id] = parameter_dict
    else:
        meta_info[business_id][group_id][database_id] = {'influxAPI':None,'influxPort':None, 'opentsdbAPI':None,'opentsdbPort':None, 'tableName':None, 'anomaly_package': None, 'anomaly_class': None,
                                                         'apply_AD_cols': None,  'time_range': 45, 'threshold_dict':None, 'parameter_dict':None}

    with open(master_json_file, 'r') as f_h:
        existing_config = _json.load(f_h)
        new_config = {**existing_config, **meta_info}

    with open(master_json_tmp, 'w') as f_h:
        _json.dump(new_config, f_h)

    try:
        shutil.move(master_json_tmp, master_json_file)
        logger.info('New Json file created successfully')

    except Exception as e:
        logger.debug('Following error occured when creating the new json file %s' % e)
        remove_bak_file = False
        remove_tmp_file = True

    finally:
        if remove_tmp_file:
            os.remove(master_json_tmp)
        if remove_bak_file:
            os.remove(master_json_bak)


if __name__ == '__main__':
    parser = _ArgumentParser()
    parser.add_argument('--business_id', default=None, help="Provide a Business Id for your AD application")
    parser.add_argument('--group_id', default=None, help="Provide a group Id for your AD application")
    parser.add_argument('--database_id', default=None, help="Provide a database Id/name for stats file")
    parser.add_argument('--parameter_config_file', default=None, help='Json file to add configuration parameters')
    args = parser.parse_args()
    business_id = args.business_id
    group_id = args.group_id
    database_id = args.database_id
    json_config_file = args.json_config_file
    json_parser(json_config_file, business_id, group_id, database_id)

